global
    # daemon
    maxconn ${HAPROXY_MAX_CONNECTIONS}
    log stdout format raw local0 ${HAPROXY_LOG_LEVEL}
    tune.ssl.default-dh-param 2048
    
    # Lua configuration for JWT validation
    lua-load /usr/local/etc/haproxy/jwt_validate.lua

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option forwardfor
    option http-server-close
    timeout connect 5000
    timeout client 50000
    timeout server 50000

    # Add detailed HTTP logging
    option logasap
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

# Stats page
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats auth ${HAPROXY_STATS_USER}:${HAPROXY_STATS_PASSWORD}

# Frontend for WrenAI UI (port 3000)
frontend http_frontend_3000
    bind *:3000
    
    # ACLs for UNPROTECTED endpoints (whitelist approach)
    acl is_unprotected path_beg /realms /resources /admin /auth /health
    acl is_unprotected path_beg ${STATIC_RESOURCE_PATHS}
    acl is_unprotected path_beg ${AUTH_ENDPOINT_PATHS}
    
    # Set proxy headers
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Forwarded-Host %[req.hdr(host)]
    http-request set-header X-Forwarded-Port 3000
    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-For %[src]
    
    # JWT validation setup
    http-request set-var(txn.jwt) hdr(Authorization),regsub(^Bearer\s+,)
    http-request set-var(txn.jwt_payload) var(txn.jwt),base64,field(2,.)
    http-request set-var(txn.jwt_header) var(txn.jwt),base64,field(1,.)
    
    # PROTECT EVERYTHING by default - only allow unprotected paths without auth
    http-request deny status 401 if !is_unprotected !{ var(txn.jwt) -m found }
    http-request deny status 401 if !is_unprotected !{ hdr(Authorization) -m reg ^Bearer\ .+ }

    # Validate JWT token for all protected paths
    http-request lua.validate_jwt if !is_unprotected
    
    # Route to WrenAI UI (port 3000)
    default_backend wrenai_ui_backend

# Frontend for WrenAI AI Service (port 5555)
frontend http_frontend_5555
    bind *:5555
    
    # ACLs for UNPROTECTED endpoints
    acl is_unprotected path_beg /realms /resources /admin /auth /health
    acl is_unprotected path_beg ${STATIC_RESOURCE_PATHS}
    acl is_unprotected path_beg ${AUTH_ENDPOINT_PATHS}
    
    # Set proxy headers
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Forwarded-Host %[req.hdr(host)]
    http-request set-header X-Forwarded-Port 5555
    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-For %[src]
    
    # JWT validation setup
    http-request set-var(txn.jwt) hdr(Authorization),regsub(^Bearer\s+,)
    http-request set-var(txn.jwt_payload) var(txn.jwt),base64,field(2,.)
    http-request set-var(txn.jwt_header) var(txn.jwt),base64,field(1,.)
    
    # PROTECT EVERYTHING by default
    http-request deny status 401 if !is_unprotected !{ var(txn.jwt) -m found }
    http-request deny status 401 if !is_unprotected !{ var(txn.jwt) -m reg ^Bearer\s+ }
    
    # Validate JWT token for all protected paths
    http-request lua.validate_jwt if !is_unprotected
    
    # Route to WrenAI AI Service (port 5555)
    default_backend wrenai_ai_backend

# Frontend for WrenAI Engine (port 8080)
frontend http_frontend_8080
    bind *:8080
    
    # ACLs for UNPROTECTED endpoints
    acl is_unprotected path_beg /realms /resources /admin /auth /health
    acl is_unprotected path_beg ${STATIC_RESOURCE_PATHS}
    acl is_unprotected path_beg ${AUTH_ENDPOINT_PATHS}
    
    # Set proxy headers
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Forwarded-Host %[req.hdr(host)]
    http-request set-header X-Forwarded-Port 8080
    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-For %[src]
    
    # JWT validation setup
    http-request set-var(txn.jwt) hdr(Authorization),regsub(^Bearer\s+,)
    http-request set-var(txn.jwt_payload) var(txn.jwt),base64,field(2,.)
    http-request set-var(txn.jwt_header) var(txn.jwt),base64,field(1,.)
    
    # PROTECT EVERYTHING by default
    http-request deny status 401 if !is_unprotected !{ var(txn.jwt) -m found }
    http-request deny status 401 if !is_unprotected !{ var(txn.jwt) -m reg ^Bearer\s+ }
    
    # Validate JWT token for all protected paths
    http-request lua.validate_jwt if !is_unprotected
    
    # Route to WrenAI Engine (port 8080)
    default_backend wrenai_engine_backend

# Frontend for WrenAI Ibis Server (port 8000)
frontend http_frontend_8000
    bind *:8000
    
    # ACLs for UNPROTECTED endpoints
    acl is_unprotected path_beg /realms /resources /admin /auth /health
    acl is_unprotected path_beg ${STATIC_RESOURCE_PATHS}
    acl is_unprotected path_beg ${AUTH_ENDPOINT_PATHS}
    
    # Set proxy headers
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Forwarded-Host %[req.hdr(host)]
    http-request set-header X-Forwarded-Port 8000
    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-For %[src]
    
    # JWT validation setup
    http-request set-var(txn.jwt) hdr(Authorization),regsub(^Bearer\s+,)
    http-request set-var(txn.jwt_payload) var(txn.jwt),base64,field(2,.)
    http-request set-var(txn.jwt_header) var(txn.jwt),base64,field(1,.)
    
    # PROTECT EVERYTHING by default
    http-request deny status 401 if !is_unprotected !{ var(txn.jwt) -m found }
    http-request deny status 401 if !is_unprotected !{ var(txn.jwt) -m reg ^Bearer\s+ }
    
    # Validate JWT token for all protected paths
    http-request lua.validate_jwt if !is_unprotected
    
    # Route to WrenAI Ibis Server (port 8000)
    default_backend wrenai_ibis_backend

# Backend definitions
backend wrenai_ui_backend
    server wrenai_ui atexo_wren_ui:3000 check

backend wrenai_ai_backend
    server wrenai_ai atexo_wren_ai_service:${WREN_AI_SERVICE_PORT} check

backend wrenai_engine_backend
    server wrenai_engine atexo_wren_engine:${WREN_ENGINE_PORT} check

backend wrenai_ibis_backend
    server wrenai_ibis atexo_ibis_server:${IBIS_SERVER_PORT} check
